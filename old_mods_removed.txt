  void cartesianMods() {
  // MODULATED BY POSITION
  //radius_start *= map(distanceFromOrigin, 0, width, 0.5, 1);
  //dna.genes[19] *= map(distanceFromOrigin, 0, width, 0.4, 1.0);
  //lifespan *= map(distanceFromOrigin, 0, width, 0.7, 3);
  //noisePercent_start *= map(distanceFromOrigin, 0, width, 0.7, 0.5);
  //twist_start *= map(distanceFromOrigin, 0, width, 0.3, 0.5);
  //fill_H_end = (gs.bkg_H + map(distanceFromOrigin, 0, width, 40, 0));
  //fill_S_start *= map(position.x, 0, width, 1, 0);
  //fill_S_start *= map(distanceFromOrigin, 0, width, 0, 0);
  //fill_S_end *= map(position.x, 0, width, 1, 0);
  //fill_S_end *= map(distanceFromOrigin, 0, width, 0, 0);
  //fill_B_end = map(distanceFromOrigin, 0, width*0.5, 250, 48);
  //fill_B_start *= map(distanceFromOrigin, 0, width, 1, 0);
  //fill_B_start *= map(position.x, 0, width, 1, 0);
  //fill_B_end *= map(distanceFromOrigin, 0, width, 0.7, 0.2);
  //stripeSize *= map(distanceFromOrigin, 0, width, 1.0, 0.6);
  //stripeRatio = map(distanceFromOrigin, 0, width, 0.3, 0.7);
  
  // MODULATED BY POSITION (Cartesian/Random)
  //lifespan = width * 0.001 * map(distanceFromOrigin, 0, width*0.7, 18, 12);

  //twist_start = map(distanceFromOrigin, 0, width, 0, 15);
  //fill_B_end = dna.genes[5] * map(distanceFromOrigin, 0, width*0.7, 0.7, 1);
  //fill_A_start = map(distanceFromOrigin, 0, width*0.7, 255, 20);
  
  // MODULATED BY INDEX NUMBER
  //stripeSize = map(id, 0, gs.seeds, 60, 10);
  //lifespan *= map(id, 0, gs.numStrains, 0.1, 1);
  //radius_start = width * 0.001 * map(id, 0, gs.numStrains, 10, 50);
  //radius_end = radius_start * map(id, 0, gs.numStrains, 0.2, 0.05);
  //dna.genes[19] = map(id, 0, gs.rows * gs.cols, 1, 1.5);
  //lifespan = width * .001 * map(id, 0, gs.seeds, 1, 500);
  //twist_start = map(id, 0, gs.numStrains, -3, 3);
  //fill_H_start =  map(id, 0, gs.numStrains, 0, 360);
  //fill_H_end =  fill_H_start;
  }
  
  void coralMods() {
    // MODULATED BY POSITION
    //radius_start *= map(distanceFromOrigin, 0, width * 0.5, 0.01, 1);
    
    r = modulator(modulators[0], dna.genes[17], dna.genes[18]) * gs.maxSize;
    //radius_end = radius_start * dna.genes[18] * 0.01;
    stripeStep = map(stripeSize, 0, 100, 0, r*2);
    //radius_start = map(distanceFromOrigin, 0, width * 0.5, 60, 30) * width * 0.001;
    //lifespan = map(distanceFromOrigin, 0, width * 0.5, 50, 100) * width * 0.001;
    //lifespan = r * 1.732;
    //noisePercent_start = map(distanceFromOrigin, 0, width * 0.5, 1, 0);
    //noisePercent_end = map(distanceFromOrigin, 0, width * 0.5, 0, 1);
    
    //stroke_H_start = map(distanceFromOrigin, 0, width * 0.5, 0, 360);
    //stroke_H_end = map(distanceFromOrigin, 0, width * 0.5, 0, 360);
    
    //fill_H_end = (gs.bkg_H + map(distanceFromOrigin, 0, width, 30, 0));
    //fill_B_start = map(position.x, 0, width, 128, 48);
    //fill_B_end = map(distanceFromOrigin, 0, width, 200, 255);
    //fill_B_end = fill_B_start * map(distanceFromOrigin, 0, width, 1, 2);
    //fill_S_start = map(position.x, 0, width, 255, 0);
    //fill_S_end = map(position.x, 0, width, 30, 0);
    //fill_S_start = map(distanceFromOrigin, 0, width, 255, 0);
    //fill_S_end = map(distanceFromOrigin, 0, width, 30, 0);
    //fill_S_end = fill_S_start * map(distanceFromOrigin, 0, width, 0.8, 0.6);
    //twist_start = map(distanceFromOrigin, 0, width, 0, 20) * 0.01;
    //twist_end = map(distanceFromOrigin, 0, width * 0.5, 250, 0) * 0.01; 
  }